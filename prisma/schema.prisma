// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    USER
}

enum Status {
    PENDING
    PAID
    CANCELLED
}

model User {
    id        String    @id @default(cuid())
    name      String
    email     String    @unique
    phone     String    @unique
    password  String
    role      Role      @default(USER)
    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @updatedAt @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    sessions     Session[]
    invitations  Invitation[]
    transactions Transaction[]

    @@map("users")
}

model Session {
    sessionToken String    @id @map("session_token")
    userId       String    @map("user_id")
    ipAddress    String?   @map("ip_address")
    expiresAt    DateTime  @map("expires_at")
    createdAt    DateTime  @default(now()) @map("created_at")
    deletedAt    DateTime? @map("deleted_at")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model Template {
    id        String    @id @default(cuid())
    name      String
    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @updatedAt @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    invitations Invitation[]

    @@map("templates")
}

model Invitation {
    id          String    @id @default(cuid())
    // transactionId String    @unique @map("transaction_id")
    userId      String    @map("user_id")
    templateId  String    @map("template_id")
    weddingDate DateTime  @map("wedding_date")
    address     String
    message     String?
    createdAt   DateTime  @default(now()) @map("created_at")
    updatedAt   DateTime  @updatedAt @map("updated_at")
    deletedAt   DateTime? @map("deleted_at")

    // transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    template Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

    guests   Guest[]
    pictures Picture[]

    @@map("invitations")
}

model Picture {
    id           String    @id @default(cuid())
    invitationId String    @map("invitation_id")
    url          String
    createdAt    DateTime  @default(now()) @map("created_at")
    updatedAt    DateTime  @updatedAt @map("updated_at")
    deletedAt    DateTime? @map("deleted_at")

    invitation Invitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)

    @@map("pictures")
}

model Guest {
    id           String    @id @default(cuid())
    invitationId String    @map("invitation_id")
    name         String
    createdAt    DateTime  @default(now()) @map("created_at")
    updatedAt    DateTime  @updatedAt @map("updated_at")
    deletedAt    DateTime? @map("deleted_at")

    invitation Invitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)

    @@map("guests")
}

model Transaction {
    id          String    @id @default(cuid())
    userId      String    @map("user_id")
    totalAmount Float     @map("total_amount")
    status      Status    @default(PENDING)
    invoiceUrl  String?   @map("invoice_url")
    xenditId    String?   @unique @map("xendit_id")
    createdAt   DateTime  @default(now()) @map("created_at")
    updatedAt   DateTime  @updatedAt @map("updated_at")
    deletedAt   DateTime? @map("deleted_at")

    users User @relation(fields: [userId], references: [id], onDelete: Cascade)

    // invitation Invitation?lee.

    @@map("transactions")
}
